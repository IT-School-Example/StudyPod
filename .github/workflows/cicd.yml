# Github Action을 통한 테스트, 빌드 자동화

# 워크플로우 이름 지정
name: CI/CD

# 워크플로우가 실행될 조건 설정
# main 브랜치에 push 될 때 자동 실행
on:
  push:
    branches: [ main ]

jobs:
  build:
    # 빌드가 수행될 가상 환경 (우분투 최신 버전)
    runs-on: ubuntu-latest

    # 환경 변수 설정 (Spring Profile 및 DB 연결 정보)
    env:
      SPRING_PROFILES_ACTIVE: local  # local 프로파일 활성화
      spring.datasource.url: ${{ secrets.RDS_HOST }}  # RDS 주소
      spring.datasource.username: ${{ secrets.RDS_USERNAME }}  # RDS 사용자명
      spring.datasource.password: ${{ secrets.RDS_PASSWORD }}  # RDS 비밀번호
      # JASYPT_PASSWORD: ${{ secrets.JASYPT_PASSWORD }}  # (선택) 암호화 키

    steps:
      # 테스트 메시지 출력 (시크릿 값 확인용 디버깅 단계)
      - name: 테스트
        run: echo "test" #"${{ secrets.RDS_HOST }} 입니다."

      # GitHub 레포지토리 체크아웃 (코드 다운로드)
      - name: 체크아웃 Github Action
        uses: actions/checkout@v3

      # AWS 자격 증명을 환경변수로 등록
      - name: Set Environment Variables
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV

      # JDK 17 설치 (corretto 배포판 사용)
      - name: JDK 17 설치
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: 17

      # gradlew 스크립트에 실행 권한 부여
      - name: gradlew 실행 권한 부여
        run: chmod +x gradlew
        shell: bash

      # Gradle 빌드 실행 (build 디렉토리에 jar 생성)
      - name: Build with Gradle
        run: ./gradlew clean build --info  # --info는 상세 로그 출력
        # run: ./gradlew clean build -x test --info  # 테스트 제외 빌드 시 사용
        shell: bash

      # 빌드된 JAR 파일 이름을 artifact 환경변수로 저장
      - name: Set artifact
        id: artifact_step
        run: |
          JAR_FILE=$(find "$PWD/build/libs" -name "*.jar" | head -n 1)
          echo "artifact=$JAR_FILE" >> $GITHUB_ENV

      # 배포 스크립트에 실행 권한 부여
      - name: Add execute permission to deploy script
        run: chmod +x execute-deploy.sh
        shell: bash

      # zip 파일 생성 (JAR 파일만 압축, deploy 디렉토리에 저장)
      - name: zip 파일 생성
        run: |
          mkdir -p deploy  # deploy 폴더 생성
          cp build/libs/*.jar deploy/  # JAR 파일 복사
          cd deploy && zip -r ./$GITHUB_SHA.zip *  # SHA 해시값으로 zip 파일 생성
          cd ../
        shell: bash

# 아래는 실제 AWS에 배포하는 단계이며, 필요 시 주석 해제하여 사용

      # AWS 자격 증명 설정 (CodeDeploy 및 S3 연동을 위해 필요)
      - name: AWS 자격 증명
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ap-northeast-2

      # 생성된 zip 파일을 S3 버킷에 업로드
      - name: S3 업로드
        run: aws s3 cp --region ap-northeast-2 ./deploy/$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$GITHUB_SHA.zip

#      # AWS CodeDeploy로 배포 요청 실행
#      - name: CodeDeploy 배포
#        run: aws deploy create-deployment
#          --application-name tableq-product
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name tableq-product-group
#          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip
